What is a Programming Language?
- Formal system for writing computer instructions
- Bridge between human logic and machine operations
- Alternative to binary (0/1) that humans can understand

===============================================
Key Components :
	1. Syntax: Rules for code structure (e.g., semicolons in C++)
	2. Semantics: Meaning of code instructions
	3. Compiler/Interpreter: Translates code to machine language

============================================
Machine Interaction:

1.Low-Level Languages 
   - Close to machine code (binary).  
   - Examples:  
     - Machine Language (1/0)  
     - Assembly Language   

2.High-Level Languages  
   - Human-readable, abstracted from hardware.  
   - Examples:  
     - Python, Java, C++ 

===============================================
Execution : 

1. Compiled Languages  :
   - Translated entirely to machine code before execution.  
   - Faster execution.  
   - Examples:  
     - C, C++  
   - Process:  
     Source Code -> Compiler -> Machine Code -> Output  

2.Interpreted Languages :  
   - Executed line-by-line at runtime.  
   - Slower but more flexible.  
   - Examples:  
     - Python, JavaScript  
   - Process:  
     Source Code -> Interpreter -> Output  

3.Hybrid  :
   - Combines compilation + interpretation.  
   - Examples:  
     - Java (JVM), C# (.NET)  
   - Process:  
     Source Code -> Bytecode -> JIT Compiler -> Machine Code -> Output  

==================================================
C# Special Case:

- Uses JIT Compilation:
  1. C# → IL (Intermediate Language)
  2. CLR converts IL → machine code at runtime
- Benefits:
  • Cross-platform (.NET Core)
  • Performance optimization
  • Enhanced security
==========================================================
Language Classification:

A. By Machine Interaction:

| Type            | Characteristics          | Examples          |
|-----------------|--------------------------|-------------------|
| Low-Level       | Hardware-specific        | Assembly, Machine |
| High-Level      | Human-readable           | Python, Java      |
==========

B. By Execution Method:
| Type            | Process                  | Examples          |
|-----------------|--------------------------|-------------------|
| Compiled        | Entire code → machine    | C++, Rust         |
| Interpreted     | Line-by-line execution   | Python, JS        |
| Hybrid (JIT)    | Intermediate → machine   | Java, C#          |
===========

C. By Paradigm:
| Paradigm        | Approach                 | Examples          |
|-----------------|--------------------------|-------------------|
| Procedural      | Step-by-step functions   | C, Pascal         |
| OOP             | Objects/classes          | Java, C#          |
| Functional      | Pure functions           | Haskell, Lisp     |
==========

Compiled vs Interpreted:

| Feature         | Compiled                | Interpreted        |
|-----------------|-------------------------|--------------------|
| Speed           | Faster                  | Slower             |
| Error Detection | Compile-time            | Runtime            |
| Portability     | OS/CPU specific         | Cross-platform     |
| Debugging       | Harder                  | Easier             |


=========================================
IDEs:
Essential Features:
1. Code editor (syntax highlighting)
2. Debugger
3. Build tools
4. Version control

Popular IDEs:
- Visual Studio (C#/C++)
- IntelliJ (Java/Kotlin)
- PyCharm (Python)
- VS Code (Multi-language)
- Android Studio (Mobile)
